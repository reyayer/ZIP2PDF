import osimport zipfileimport shutilfrom PIL import Imageimport argparsefrom ebooklib import epub# Add support for DDS if availabletry:    import PIL.DdsImagePluginexcept ImportError:    print("Warning: DDS support requires pillow-dds plugin. Install with: pip install pillow-dds")def zip_to_pdf(zip_path, output_pdf):    temp_dir = "temp_files"    if not os.path.exists(temp_dir):        os.makedirs(temp_dir)    with zipfile.ZipFile(zip_path, 'r') as zip_ref:        zip_ref.extractall(temp_dir)    files = []    for root, _, filenames in os.walk(temp_dir):        for f in filenames:            files.append(os.path.join(root, f))    images = []    for fpath in files:        if fpath.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp', '.gif', '.dds', '.jp2')):            try:                img = Image.open(fpath).convert('RGB')                images.append(img)            except Exception as e:                print(f"Error opening image {fpath}: {e}")        elif fpath.lower().endswith('.txt'):            with open(fpath, 'r', encoding='utf-8') as txt_file:                content = txt_file.read()            img = create_image_from_text(content)            images.append(img)    if not images:        print("No valid images or text files to include in PDF.")        shutil.rmtree(temp_dir)        return    try:        images[0].save(output_pdf, save_all=True, append_images=images[1:])        print(f"PDF created successfully: {output_pdf}")    except Exception as e:        print(f"Error saving PDF: {e}")    shutil.rmtree(temp_dir)def create_image_from_text(text, width=600, font_size=20):    from PIL import ImageDraw, ImageFont    lines = text.splitlines()    height = max(100, (len(lines) + 2) * font_size)    img = Image.new('RGB', (width, height), color='white')    draw = ImageDraw.Draw(img)    try:        font = ImageFont.truetype("arial.ttf", font_size)    except:        font = ImageFont.load_default()    y = 0    for line in lines:        draw.text((10, y), line, fill='black', font=font)        y += font_size + 4    return imgdef zip_to_epub(zip_path, output_epub):    temp_dir = "temp_files"    if not os.path.exists(temp_dir):        os.makedirs(temp_dir)    with zipfile.ZipFile(zip_path, 'r') as zip_ref:        zip_ref.extractall(temp_dir)    files = sorted(os.listdir(temp_dir))    book = epub.EpubBook()    book.set_identifier("id123456")    book.set_title("Image and Text Collection")    book.set_language("en")    book.add_author("Generated by zip2epub")    spine = ['nav']    for idx, f in enumerate(files, start=1):        fpath = os.path.join(temp_dir, f)        html_name = f'page_{idx}.xhtml'        if f.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp', '.gif', '.dds', '.jp2')):            # Embed image in HTML            html_content = f'<html><body><img src="{f}" style="width:100%;"/></body></html>'            # Determine media type            ext = os.path.splitext(f)[1].lower()            media_type = {                '.png': 'image/png',                '.jpg': 'image/jpeg',                '.jpeg': 'image/jpeg',                '.bmp': 'image/bmp',                '.gif': 'image/gif',                '.dds': 'image/vnd-ms.dds',                '.jp2': 'image/jp2'            }.get(ext, 'image/jpeg')            with open(fpath, 'rb') as img_file:                book.add_item(epub.EpubItem(uid=f, file_name=f, media_type=media_type, content=img_file.read()))        elif f.lower().endswith('.txt'):            with open(fpath, 'r', encoding='utf-8') as txt_file:                text = txt_file.read().replace('\n', '<br/>')            html_content = f'<html><body><pre>{text}</pre></body></html>'        else:            continue        c = epub.EpubHtml(title=f'Page {idx}', file_name=html_name, lang='en')        c.content = html_content        book.add_item(c)        spine.append(c)    book.toc = tuple(spine[1:])    book.spine = spine    book.add_item(epub.EpubNcx())    book.add_item(epub.EpubNav())    epub.write_epub(output_epub, book, {})    print(f"EPUB created successfully: {output_epub}")    shutil.rmtree(temp_dir)def main():    parser = argparse.ArgumentParser(description="Convert a ZIP file of images and text files to PDF or EPUB.")    parser.add_argument("zipfile", help="Path to the ZIP file containing images and text.")    parser.add_argument("output", help="Path to save the output file.")    parser.add_argument("--format", choices=["pdf", "epub"], default="pdf", help="Output format: pdf or epub (default: pdf)")    args = parser.parse_args()    if args.format == "pdf":        zip_to_pdf(args.zipfile, args.output)    elif args.format == "epub":        zip_to_epub(args.zipfile, args.output)    else:        print("Unsupported format:", args.format)if __name__ == "__main__":    main()