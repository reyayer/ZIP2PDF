import osimport zipfileimport shutilimport argparse# Try to import non-standard librariestry:    from PIL import Image, ImageDraw, ImageFontexcept ImportError:    Image = None    print("Warning: Pillow library is missing. Install it with: pip install pillow")try:    import ebooklib    from ebooklib import epubexcept ImportError:    epub = None    print("Warning: ebooklib library is missing. Install it with: pip install ebooklib")try:    from PyPDF2 import PdfMerger, PdfReaderexcept ImportError:    PdfMerger = None    print("Warning: PyPDF2 library is missing. Install it with: pip install PyPDF2")try:    import py7zrexcept ImportError:    py7zr = None    print("Warning: py7zr library is missing. Install it with: pip install py7zr")try:    import PIL.DdsImagePlugin  # pillow-dds for .dds supportexcept ImportError:    print("Warning: pillow-dds plugin is missing for .dds support. Install it with: pip install pillow-dds")def extract_archive(archive_path, output_dir):    ext = os.path.splitext(archive_path)[1].lower()    if ext == '.zip':        with zipfile.ZipFile(archive_path, 'r') as z:            z.extractall(output_dir)    elif ext == '.7z':        if not py7zr:            print("Error: py7zr not installed; cannot extract .7z files.")            return        with py7zr.SevenZipFile(archive_path, mode='r') as z:            z.extractall(path=output_dir)    else:        raise ValueError("Unsupported archive format. Supported: .zip, .7z")def zip_to_pdf(archive_path, output_pdf):    if not Image or not PdfMerger:        print("Error: Required libraries (Pillow and PyPDF2) are not installed.")        return    temp_dir = "temp_files"    if not os.path.exists(temp_dir):        os.makedirs(temp_dir)    extract_archive(archive_path, temp_dir)    files = []    for root, _, filenames in os.walk(temp_dir):        for f in filenames:            files.append(os.path.join(root, f))    images = []    pdfs = []    for fpath in files:        ext = fpath.lower()        if ext.endswith(('.png', '.jpg', '.jpeg', '.bmp', '.gif', '.dds', '.jp2')):            try:                img = Image.open(fpath).convert('RGB')                images.append(img)            except Exception as e:                print(f"Error opening image {fpath}: {e}")        elif ext.endswith('.txt'):            with open(fpath, 'r', encoding='utf-8') as txt_file:                content = txt_file.read()            img = create_image_from_text(content)            images.append(img)        elif ext.endswith('.pdf'):            pdfs.append(fpath)    if not images and not pdfs:        print("No valid images, text, or PDFs to include in output.")        shutil.rmtree(temp_dir)        return    temp_image_pdf = "temp_images.pdf"    if images:        try:            images[0].save(temp_image_pdf, save_all=True, append_images=images[1:])            pdfs.insert(0, temp_image_pdf)        except Exception as e:            print(f"Error saving images as PDF: {e}")    merger = PdfMerger()    for pdf in pdfs:        try:            merger.append(pdf)        except Exception as e:            print(f"Error merging PDF {pdf}: {e}")    merger.write(output_pdf)    merger.close()    print(f"PDF created successfully: {output_pdf}")    if os.path.exists(temp_image_pdf):        os.remove(temp_image_pdf)    shutil.rmtree(temp_dir)def create_image_from_text(text, width=600, font_size=20):    if not Image:        print("Error: Pillow library is not available to create text images.")        return None    lines = text.splitlines()    height = max(100, (len(lines) + 2) * font_size)    img = Image.new('RGB', (width, height), color='white')    draw = ImageDraw.Draw(img)    try:        font = ImageFont.truetype("arial.ttf", font_size)    except:        font = ImageFont.load_default()    y = 0    for line in lines:        draw.text((10, y), line, fill='black', font=font)        y += font_size + 4    return imgdef zip_to_epub(archive_path, output_epub):    if not Image or not epub:        print("Error: Required libraries (Pillow and ebooklib) are not installed.")        return    temp_dir = "temp_files"    if not os.path.exists(temp_dir):        os.makedirs(temp_dir)    extract_archive(archive_path, temp_dir)    files = sorted(os.listdir(temp_dir))    book = epub.EpubBook()    book.set_identifier("id123456")    book.set_title("Image, Text, and PDF Collection")    book.set_language("en")    book.add_author("Generated by zip2epub")    spine = ['nav']    for idx, f in enumerate(files, start=1):        fpath = os.path.join(temp_dir, f)        html_name = f'page_{idx}.xhtml'        if f.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp', '.gif', '.dds', '.jp2')):            html_content = f'<html><body><img src="{f}" style="width:100%;"/></body></html>'            ext = os.path.splitext(f)[1].lower()            media_type = {                '.png': 'image/png',                '.jpg': 'image/jpeg',                '.jpeg': 'image/jpeg',                '.bmp': 'image/bmp',                '.gif': 'image/gif',                '.dds': 'image/vnd-ms.dds',                '.jp2': 'image/jp2'            }.get(ext, 'image/jpeg')            with open(fpath, 'rb') as img_file:                book.add_item(epub.EpubItem(uid=f, file_name=f, media_type=media_type, content=img_file.read()))        elif f.lower().endswith('.txt'):            with open(fpath, 'r', encoding='utf-8') as txt_file:                text = txt_file.read().replace('\n', '<br/>')            html_content = f'<html><body><pre>{text}</pre></body></html>'        elif f.lower().endswith('.pdf'):            with open(fpath, 'rb') as pdf_file:                book.add_item(epub.EpubItem(uid=f, file_name=f, media_type='application/pdf', content=pdf_file.read()))            html_content = f'<html><body><p>PDF file: <a href="{f}">{f}</a></p></body></html>'        else:            continue        c = epub.EpubHtml(title=f'Page {idx}', file_name=html_name, lang='en')        c.content = html_content        book.add_item(c)        spine.append(c)    book.toc = tuple(spine[1:])    book.spine = spine    book.add_item(epub.EpubNcx())    book.add_item(epub.EpubNav())    epub.write_epub(output_epub, book, {})    print(f"EPUB created successfully: {output_epub}")    shutil.rmtree(temp_dir)def main():    parser = argparse.ArgumentParser(description="Convert a .zip or .7z archive of images, text, and PDFs to PDF or EPUB.")    parser.add_argument("archive", help="Path to the .zip or .7z file containing images, text, and PDFs.")    parser.add_argument("output", help="Path to save the output file.")    parser.add_argument("--format", choices=["pdf", "epub"], default="pdf", help="Output format: pdf or epub (default: pdf)")    args = parser.parse_args()    if args.format == "pdf":        zip_to_pdf(args.archive, args.output)    elif args.format == "epub":        zip_to_epub(args.archive, args.output)    else:        print("Unsupported format:", args.format)if __name__ == "__main__":    main()