import osimport shutilimport zipfileimport argparsetry:    import py7zrexcept ImportError:    py7zr = None    print("Warning: py7zr is not installed. 7z file extraction wonâ€™t work. Install with: pip install py7zr")try:    from PIL import Image, ImageDraw, ImageFontexcept ImportError:    Image = None    print("Warning: PIL (Pillow) is missing. Image processing will not work. Install with: pip install pillow")try:    from PyPDF2 import PdfMergerexcept ImportError:    PdfMerger = None    print("Warning: PyPDF2 is missing. PDF merging will not work. Install with: pip install PyPDF2")try:    from ebooklib import epubexcept ImportError:    epub = None    print("Warning: ebooklib is missing. EPUB creation will not work. Install with: pip install ebooklib")try:    from tqdm import tqdmexcept ImportError:    tqdm = None    print("Warning: tqdm is missing. Progress bars will not be displayed. Install with: pip install tqdm")def extract_archive(archive_path, extract_to):    ext = archive_path.lower()    if ext.endswith('.zip'):        with zipfile.ZipFile(archive_path, 'r') as zip_ref:            zip_ref.extractall(extract_to)    elif ext.endswith('.7z'):        if py7zr:            with py7zr.SevenZipFile(archive_path, mode='r') as archive:                archive.extractall(path=extract_to)        else:            print("py7zr is not installed. Cannot extract 7z files.")    else:        print("Unsupported archive format:", ext)def create_image_from_text(text, width=600, font_size=20):    lines = text.splitlines()    height = max(100, (len(lines) + 2) * font_size)    img = Image.new('RGB', (width, height), color='white')    draw = ImageDraw.Draw(img)    try:        font = ImageFont.truetype("arial.ttf", font_size)    except:        font = ImageFont.load_default()    y = 0    for line in lines:        draw.text((10, y), line, fill='black', font=font)        y += font_size + 4    return imgdef zip_to_pdf(archive_path, output_pdf):    if not Image or not PdfMerger:        print("Error: Required libraries are not installed.")        return    temp_dir = "temp_files"    os.makedirs(temp_dir, exist_ok=True)    extract_archive(archive_path, temp_dir)    files = []    for root, _, filenames in os.walk(temp_dir):        for f in filenames:            files.append(os.path.join(root, f))    images = []    pdfs = []    progress_bar = tqdm(files, desc="Processing files", unit="file") if tqdm else files    for fpath in progress_bar:        ext = fpath.lower()        if ext.endswith(('.png', '.jpg', '.jpeg', '.bmp', '.gif', '.dds', '.jp2')):            try:                img = Image.open(fpath).convert('RGB')                images.append(img)            except Exception as e:                print(f"Error opening image {fpath}: {e}")        elif ext.endswith('.txt'):            with open(fpath, 'r', encoding='utf-8') as txt_file:                content = txt_file.read()            img = create_image_from_text(content)            images.append(img)        elif ext.endswith('.pdf'):            pdfs.append(fpath)    if not images and not pdfs:        print("No valid files to include in output.")        shutil.rmtree(temp_dir)        return    temp_image_pdf = "temp_images.pdf"    if images:        try:            if tqdm:                with tqdm(total=1, desc="Saving image PDF") as pbar:                    images[0].save(temp_image_pdf, save_all=True, append_images=images[1:])                    pbar.update(1)            else:                print("Saving image PDF...")                images[0].save(temp_image_pdf, save_all=True, append_images=images[1:])            pdfs.insert(0, temp_image_pdf)        except Exception as e:            print(f"Error saving images as PDF: {e}")    if tqdm:        merger = PdfMerger()        with tqdm(pdfs, desc="Merging PDFs", unit="pdf") as pbar:            for pdf in pbar:                try:                    merger.append(pdf)                except Exception as e:                    print(f"Error merging PDF {pdf}: {e}")        merger.write(output_pdf)        merger.close()    else:        print("Merging PDFs...")        merger = PdfMerger()        for pdf in pdfs:            try:                merger.append(pdf)            except Exception as e:                print(f"Error merging PDF {pdf}: {e}")        merger.write(output_pdf)        merger.close()    print(f"PDF created successfully: {output_pdf}")    if os.path.exists(temp_image_pdf):        os.remove(temp_image_pdf)    shutil.rmtree(temp_dir)def zip_to_epub(archive_path, output_epub):    if not epub or not Image:        print("Error: Required libraries (ebooklib, Pillow) are not installed.")        return    temp_dir = "temp_files"    os.makedirs(temp_dir, exist_ok=True)    extract_archive(archive_path, temp_dir)    files = []    for root, _, filenames in os.walk(temp_dir):        for f in filenames:            files.append(os.path.join(root, f))    book = epub.EpubBook()    book.set_identifier("id123456")    book.set_title("Image and Text Collection")    book.set_language("en")    book.add_author("Generated by zip2epub")    spine = ['nav']    progress_bar = tqdm(files, desc="Adding to EPUB", unit="file") if tqdm else files    for idx, fpath in enumerate(progress_bar, start=1):        ext = fpath.lower()        html_name = f'page_{idx}.xhtml'        if ext.endswith(('.png', '.jpg', '.jpeg', '.bmp', '.gif', '.dds', '.jp2')):            html_content = f'<html><body><img src="{os.path.basename(fpath)}" style="width:100%;"/></body></html>'            with open(fpath, 'rb') as img_file:                book.add_item(epub.EpubItem(uid=f'img{idx}', file_name=os.path.basename(fpath),                                            media_type='image/jpeg', content=img_file.read()))        elif ext.endswith('.txt'):            with open(fpath, 'r', encoding='utf-8') as txt_file:                text = txt_file.read().replace('\n', '<br/>')            html_content = f'<html><body><pre>{text}</pre></body></html>'        elif ext.endswith('.pdf'):            # Convert PDF to images, then add to EPUB            try:                from pdf2image import convert_from_path                pdf_images = convert_from_path(fpath)                for i, img in enumerate(pdf_images, start=1):                    img_name = f"{os.path.splitext(os.path.basename(fpath))[0]}_page{i}.jpg"                    img_path = os.path.join(temp_dir, img_name)                    img.save(img_path, "JPEG")                    with open(img_path, 'rb') as img_file:                        book.add_item(epub.EpubItem(uid=f'pdfimg{idx}_{i}', file_name=img_name,                                                    media_type='image/jpeg', content=img_file.read()))                    html_content = f'<html><body><img src="{img_name}" style="width:100%;"/></body></html>'                    c = epub.EpubHtml(title=f'Page {idx}-{i}', file_name=f'page_{idx}_{i}.xhtml', lang='en')                    c.content = html_content                    book.add_item(c)                    spine.append(c)                continue            except ImportError:                print("pdf2image not installed. Skipping PDF conversion.")                continue            except Exception as e:                print(f"Error processing PDF {fpath}: {e}")                continue        else:            continue        c = epub.EpubHtml(title=f'Page {idx}', file_name=html_name, lang='en')        c.content = html_content        book.add_item(c)        spine.append(c)    book.toc = tuple(spine[1:])    book.spine = spine    book.add_item(epub.EpubNcx())    book.add_item(epub.EpubNav())    epub.write_epub(output_epub, book, {})    print(f"EPUB created successfully: {output_epub}")    shutil.rmtree(temp_dir)def main():    parser = argparse.ArgumentParser(description="Convert an archive of images/texts to PDF or EPUB.")    parser.add_argument("archive", help="Path to the archive (.zip or .7z).")    parser.add_argument("output", help="Output file path (PDF or EPUB).")    parser.add_argument("--format", choices=["pdf", "epub"], default="pdf", help="Output format (default: pdf).")    args = parser.parse_args()    if args.format == "pdf":        zip_to_pdf(args.archive, args.output)    elif args.format == "epub":        zip_to_epub(args.archive, args.output)    else:        print("Unsupported format:", args.format)if __name__ == "__main__":    main()